// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: rewards.sql

package store

import (
	"context"

	"github.com/google/uuid"
)

const actorAwards = `-- name: ActorAwards :many
SELECT ID, Name, Year, MovieID, ActorID, DirectorID FROM Awards WHERE ActorID = $1
`

func (q *Queries) ActorAwards(ctx context.Context, actorid *uuid.UUID) ([]Award, error) {
	rows, err := q.db.Query(ctx, actorAwards, actorid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Award
	for rows.Next() {
		var i Award
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Year,
			&i.Movieid,
			&i.Actorid,
			&i.Directorid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const awardsByName = `-- name: AwardsByName :one
SELECT ID, Name, Year, MovieID, ActorID, DirectorID FROM Awards WHERE Name = $1
`

func (q *Queries) AwardsByName(ctx context.Context, name string) (Award, error) {
	row := q.db.QueryRow(ctx, awardsByName, name)
	var i Award
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Year,
		&i.Movieid,
		&i.Actorid,
		&i.Directorid,
	)
	return i, err
}

const awardsInYear = `-- name: AwardsInYear :many
SELECT ID, Name, Year, MovieID, ActorID, DirectorID FROM Awards WHERE Year = $1
`

func (q *Queries) AwardsInYear(ctx context.Context, year int) ([]Award, error) {
	rows, err := q.db.Query(ctx, awardsInYear, year)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Award
	for rows.Next() {
		var i Award
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Year,
			&i.Movieid,
			&i.Actorid,
			&i.Directorid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createAward = `-- name: CreateAward :exec
INSERT INTO Awards (ID, Name, Year, MovieID, ActorID, DirectorID)
VALUES ($1, $2, $3, $4, $5, $6)
`

type CreateAwardParams struct {
	ID         uuid.UUID
	Name       string
	Year       int
	Movieid    uuid.UUID
	Actorid    *uuid.UUID
	Directorid *uuid.UUID
}

func (q *Queries) CreateAward(ctx context.Context, arg CreateAwardParams) error {
	_, err := q.db.Exec(ctx, createAward,
		arg.ID,
		arg.Name,
		arg.Year,
		arg.Movieid,
		arg.Actorid,
		arg.Directorid,
	)
	return err
}

const deleteAward = `-- name: DeleteAward :exec
DELETE FROM Awards WHERE ID = $1
`

func (q *Queries) DeleteAward(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteAward, id)
	return err
}

const directorAwards = `-- name: DirectorAwards :many
SELECT ID, Name, Year, MovieID, ActorID, DirectorID FROM Awards WHERE DirectorID = $1
`

func (q *Queries) DirectorAwards(ctx context.Context, directorid *uuid.UUID) ([]Award, error) {
	rows, err := q.db.Query(ctx, directorAwards, directorid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Award
	for rows.Next() {
		var i Award
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Year,
			&i.Movieid,
			&i.Actorid,
			&i.Directorid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAward = `-- name: GetAward :one
SELECT ID, Name, Year, MovieID, ActorID, DirectorID FROM Awards WHERE ID = $1
`

func (q *Queries) GetAward(ctx context.Context, id uuid.UUID) (Award, error) {
	row := q.db.QueryRow(ctx, getAward, id)
	var i Award
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Year,
		&i.Movieid,
		&i.Actorid,
		&i.Directorid,
	)
	return i, err
}

const movieAwards = `-- name: MovieAwards :many
SELECT ID, Name, Year, MovieID, ActorID, DirectorID FROM Awards WHERE MovieID = $1
`

func (q *Queries) MovieAwards(ctx context.Context, movieid uuid.UUID) ([]Award, error) {
	rows, err := q.db.Query(ctx, movieAwards, movieid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Award
	for rows.Next() {
		var i Award
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Year,
			&i.Movieid,
			&i.Actorid,
			&i.Directorid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAward = `-- name: UpdateAward :exec
UPDATE Awards
SET Name = $1, Year = $2, MovieID = $3, ActorID = $4, DirectorID = $5
WHERE ID = $1
`

type UpdateAwardParams struct {
	Name       string
	Year       int
	Movieid    uuid.UUID
	Actorid    *uuid.UUID
	Directorid *uuid.UUID
}

func (q *Queries) UpdateAward(ctx context.Context, arg UpdateAwardParams) error {
	_, err := q.db.Exec(ctx, updateAward,
		arg.Name,
		arg.Year,
		arg.Movieid,
		arg.Actorid,
		arg.Directorid,
	)
	return err
}
