// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: actors.sql

package store

import (
	"context"

	"github.com/google/uuid"
)

const addActorToMovie = `-- name: AddActorToMovie :exec
INSERT INTO MovieActors (ActorID, MovieID) VALUES ($1, $2)
`

type AddActorToMovieParams struct {
	Actorid uuid.UUID
	Movieid uuid.UUID
}

func (q *Queries) AddActorToMovie(ctx context.Context, arg AddActorToMovieParams) error {
	_, err := q.db.Exec(ctx, addActorToMovie, arg.Actorid, arg.Movieid)
	return err
}

const allActors = `-- name: AllActors :many
SELECT ID, Name, BirthYear FROM Actors
`

func (q *Queries) AllActors(ctx context.Context) ([]Actor, error) {
	rows, err := q.db.Query(ctx, allActors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Actor
	for rows.Next() {
		var i Actor
		if err := rows.Scan(&i.ID, &i.Name, &i.Birthyear); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createActor = `-- name: CreateActor :exec
INSERT INTO Actors (ID, Name, BirthYear) VALUES ($1, $2, $3)
`

type CreateActorParams struct {
	ID        uuid.UUID
	Name      string
	Birthyear *int
}

func (q *Queries) CreateActor(ctx context.Context, arg CreateActorParams) error {
	_, err := q.db.Exec(ctx, createActor, arg.ID, arg.Name, arg.Birthyear)
	return err
}

const deleteActor = `-- name: DeleteActor :exec
DELETE FROM Actors WHERE ID = $1
`

func (q *Queries) DeleteActor(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteActor, id)
	return err
}

const getActor = `-- name: GetActor :one
SELECT ID, Name, BirthYear FROM Actors WHERE ID = $1
`

func (q *Queries) GetActor(ctx context.Context, id uuid.UUID) (Actor, error) {
	row := q.db.QueryRow(ctx, getActor, id)
	var i Actor
	err := row.Scan(&i.ID, &i.Name, &i.Birthyear)
	return i, err
}

const getActorsInMovie = `-- name: GetActorsInMovie :many
SELECT a.ID, a.Name, a.BirthYear FROM Actors a INNER JOIN MovieActors ma ON a.ID = ma.ActorID WHERE ma.MovieID = $1
`

func (q *Queries) GetActorsInMovie(ctx context.Context, movieid uuid.UUID) ([]Actor, error) {
	rows, err := q.db.Query(ctx, getActorsInMovie, movieid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Actor
	for rows.Next() {
		var i Actor
		if err := rows.Scan(&i.ID, &i.Name, &i.Birthyear); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateActor = `-- name: UpdateActor :exec
UPDATE Actors SET Name = $2, BirthYear = $3 WHERE ID = $1
`

type UpdateActorParams struct {
	ID        uuid.UUID
	Name      string
	Birthyear *int
}

func (q *Queries) UpdateActor(ctx context.Context, arg UpdateActorParams) error {
	_, err := q.db.Exec(ctx, updateActor, arg.ID, arg.Name, arg.Birthyear)
	return err
}
