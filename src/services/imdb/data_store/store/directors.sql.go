// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: directors.sql

package store

import (
	"context"

	"github.com/google/uuid"
)

const allDirectors = `-- name: AllDirectors :many
SELECT ID, Name, BirthYear FROM Directors
`

func (q *Queries) AllDirectors(ctx context.Context) ([]Director, error) {
	rows, err := q.db.Query(ctx, allDirectors)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Director
	for rows.Next() {
		var i Director
		if err := rows.Scan(&i.ID, &i.Name, &i.Birthyear); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createDirector = `-- name: CreateDirector :exec
INSERT INTO Directors (ID, Name, BirthYear) VALUES ($1, $2, $3)
`

type CreateDirectorParams struct {
	ID        uuid.UUID
	Name      string
	Birthyear *int
}

func (q *Queries) CreateDirector(ctx context.Context, arg CreateDirectorParams) error {
	_, err := q.db.Exec(ctx, createDirector, arg.ID, arg.Name, arg.Birthyear)
	return err
}

const deleteDirector = `-- name: DeleteDirector :exec
DELETE FROM Directors WHERE ID = $1
`

func (q *Queries) DeleteDirector(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteDirector, id)
	return err
}

const getDirector = `-- name: GetDirector :one
SELECT ID, Name, BirthYear FROM Directors WHERE ID = $1
`

func (q *Queries) GetDirector(ctx context.Context, id uuid.UUID) (Director, error) {
	row := q.db.QueryRow(ctx, getDirector, id)
	var i Director
	err := row.Scan(&i.ID, &i.Name, &i.Birthyear)
	return i, err
}

const updateDirector = `-- name: UpdateDirector :exec
UPDATE Directors SET Name = $2, BirthYear = $3 WHERE ID = $1
`

type UpdateDirectorParams struct {
	ID        uuid.UUID
	Name      string
	Birthyear *int
}

func (q *Queries) UpdateDirector(ctx context.Context, arg UpdateDirectorParams) error {
	_, err := q.db.Exec(ctx, updateDirector, arg.ID, arg.Name, arg.Birthyear)
	return err
}
